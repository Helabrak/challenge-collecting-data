this file has two main sections: 
1-Scraping steps in general
2- scraping for our specific project:

1-Scraping steps in general: 
Getting the HTML file
from bs4 import BeautifulSoup
import requests

source=requests.get('https://www.immoweb.be/en').text
soup = BeautifulSoup(source,'lxml')

print(soup.prettify())


scraping info from HTML: try to access it like an attribute
source=requests.get('website')
soup = BeautifulSoup( source,'lxml' )
to find a title:
match=soup.tag.text (lets say title so soup.title.text- note text here to get only the text in the title and not the title tag )
print( match )
to find the first division:
match=soup.div
print( match )
to find a specific division(ex: footer)
match=soup.find(‘div’, class_=’footer’)
print( match )
to find a class within division: (example : article)
article=soup.find(‘div’, class_=’article’)
print( article )
to access child tags in the class: to dig down and search for tags in class in division
Now we need a loop to get all similar classes( articles) – this should be locality for example for all the listing be a house or apartment
to find a locality
Locality=soup.find('div', class_=<'classified__information--address-raw'>)
print(Locality)

Note: to find the part of the division in the inspect right click on price(example) and then inspect and not just inspect of the whole page
<div class="classified__header-primary-info"><h1 class="classified__title">
                                                                                    House
                                                        for sale

                    </h1> <p class="classified__price"><span aria-hidden="true">€1,390,000</span> <span class="sr-only">1390000€</span></p></div>




article=soup.find('what you are trying to find')
print(what you are trying to find)

for article in soup.findall('article'):
    headline=article.h2.a.text
    print(headline)

locality=article.find('div',class='entry-content').p.text
print(locality)

creating a try except for the categories that might be missing
try:
  
except Exception as e:
 

creating CSV file and opening it in excel:
#with the import section at the top
    import csv
#directly after soup requests add:
    ImmoEliza_csv_dataset=open('icd_scrape.csv','w')
    csv_writer=csv.writer(ImmoEliza_csv_dataset)
    csv_writer.writerow(['locality','property_type','property_sub_type','sale_type','price','rooms','area','equ_kitchen','furnished','Open fire','terrace','terrace_area','garden','land_surface','area_surface','facades_num','pool','build_state'])
#at the end after our loop:
    csv_writer.writerow(['locality','property_type','property_sub_type','sale_type','price','rooms','area','equ_kitchen','furnished','Open fire','terrace','terrace_area','garden','land_surface','area_surface','facades_num','pool','build_state'])
    ImmoEliza_csv_dataset.close()
# will be found on the right with the project file:
    right click on the file
    open in-->explorer
    right click on the file and open with excel

2- scraping for our specific project: 
# on Immoweb:(note these might be subdivisions and we might need to scrap the main divions first and then dig down to the subclasses (discuss with the team tomorrow and check tutorial)

# <div id="classified-app'> for the whole section

# <div class_="classified"

for:
#to scrap the html
from bs4 import BeautifulSoup
import requests
import pandas as pd

source=requests.get('https://www.immoweb.be/en/classified/apartment/for-sale/bertrix/6880/9376985?searchId=60c31d9d837ba').text
soup = BeautifulSoup(source,'lxml')

property=soup.body.main.find('h1',{'class': 'classified__title'}).text
property_type=str.split(property)[0]
print(property_type)

property=soup.body.main.find('h1',{'class': 'classified__title'}).text
type_of_sale=str.split(property)[2]
print(type_of_sale)

price = soup.body.main.find( 'span', {'class': 'sr-only'} ).text
print(price)
# Locality --> <span(note not division but span) 'classified__information--address-raw'> then <span locality </span>==$0

#these are what I got 

#Apartment
#sale
#246800€





# Subtype of property (Bungalow, Chalet, Mansion, ...)--> not always provided

# Number of rooms: <span class="overview__text">

# Area:<span class="overview__text">
    # 20000
    # <span class="abbreviation"><span aria-hidden="true">
    # m² </span> <span class="sr-only">
    # square meters  </span></span>
    # of land </span>
#Fully equipped kitchen (Yes/No)
#Furnished (Yes/No)- interior division
    <table class="classified-table"><tbody class="classified-table__body"><tr class="classified-table__row"><th scope="row" class="classified-table__header">
    <tr class="classified-table__row"><th scope="row" class="classified-table__header">Furnished</th> <td class="classified-table__data">
                                    No
                                </td></tr>
#Open fire (Yes/No)--.not always provided
#Terrace (Yes/No)-->  not always provided
    #If yes: Area -->  not always provided
#Garden (Yes/No)
    #If yes: Area
#Surface of the land
    <td class="classified-table__data">
     452
    <span class="abbreviation"><span aria-hidden="true">
    m²   </span> <span class="sr-only">
    square meters
     </span></span></td>

#Surface area of the plot of land( I guess here we need to select the raw with the number (square meters for the CSV/excel file to have the number directly)
        <td class="classified-table__data">
        20000
        <span class="abbreviation"><span aria-hidden="true">
                m²
            </span> <span class="sr-only">
                square meters
            </span></span></td>

#Number of facades
#Swimming pool (Yes/No):
    <th scope="row" class="classified-table__header">
    Swimming pool
     </th>
     
 creating a try except for the categories that might be missing
try:
    #enter all the functions for the below items (without their print lines.)
    #Note: not sure if I should do them separately for each element)
    property_sub_type=
    equ_kitchen=
    furnished=
    open_fire=
    terrace=
    terrace_area=
    garden=
    garden_area=
    land_surface=
    area_surface=
    facades_num=
    pool=
    build_state=
except Exception as e:
    property_sub_type= None
    equ_kitchen= None
    furnished= None
    open_fire= None
    terrace= None
    terrace_area= None
    garden= None
    garden_area= None
    land_surface= None
    area_surface= None
    facades_num= None
    pool= None
    build_state= None
    
    
# creating CSV file and opening it in excel:
#with the import section at the top
    import csv
#directly after soup requests add:
    ImmoEliza_csv_dataset=open('icd_scrape.csv','w')
    csv_writer=csv.writer(ImmoEliza_csv_dataset)
    csv_writer.writerow(['locality','property_type','property_sub_type','sale_type','price','rooms','area','equ_kitchen','furnished','Open fire','terrace','terrace_area','garden','land_surface','area_surface','facades_num','pool','build_state'])
#at the end after our loop:
    csv_writer.writerow(['locality','property_type','property_sub_type','sale_type','price','rooms','area','equ_kitchen','furnished','Open fire','terrace','terrace_area','garden','land_surface','area_surface','facades_num','pool','build_state'])
    ImmoEliza_csv_dataset.close()
# will be found on the right with the project file:
    right click on the file
    open in-->explorer
    right click on the file and open with excel
